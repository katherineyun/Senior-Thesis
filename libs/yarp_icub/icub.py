# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_icub', [dirname(__file__)])
        except ImportError:
            import _icub
            return _icub
        if fp is not None:
            try:
                _mod = imp.load_module('_icub', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _icub = swig_import_helper()
    del swig_import_helper
else:
    import _icub
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _icub.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _icub.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _icub.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _icub.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _icub.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _icub.SwigPyIterator_equal(self, x)

    def copy(self):
        return _icub.SwigPyIterator_copy(self)

    def next(self):
        return _icub.SwigPyIterator_next(self)

    def __next__(self):
        return _icub.SwigPyIterator___next__(self)

    def previous(self):
        return _icub.SwigPyIterator_previous(self)

    def advance(self, n):
        return _icub.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _icub.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _icub.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _icub.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _icub.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _icub.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _icub.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _icub.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

#it is changed by Peixin from "import yarp" to "from . import yarp"
from . import yarp

def notImplemented(verbose):
    """notImplemented(unsigned int const verbose)"""
    return _icub.notImplemented(verbose)
class iKinLink(_object):
    """Proxy of C++ iCub::iKin::iKinLink class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iKinLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iKinLink, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iKinLink self, double _A, double _D, double _Alpha, double _Offset, double _Min, double _Max) -> iKinLink
        __init__(iCub::iKin::iKinLink self, double _A, double _D, double _Alpha, double _Offset, double _Min) -> iKinLink
        __init__(iCub::iKin::iKinLink self, double _A, double _D, double _Alpha, double _Offset) -> iKinLink
        __init__(iCub::iKin::iKinLink self, iKinLink l) -> iKinLink
        """
        this = _icub.new_iKinLink(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setConstraint(self, _constrained):
        """setConstraint(iKinLink self, bool _constrained)"""
        return _icub.iKinLink_setConstraint(self, _constrained)


    def getConstraint(self):
        """getConstraint(iKinLink self) -> bool"""
        return _icub.iKinLink_getConstraint(self)


    def setVerbosity(self, _verbose):
        """setVerbosity(iKinLink self, unsigned int _verbose)"""
        return _icub.iKinLink_setVerbosity(self, _verbose)


    def getVerbosity(self):
        """getVerbosity(iKinLink self) -> unsigned int"""
        return _icub.iKinLink_getVerbosity(self)


    def isBlocked(self):
        """isBlocked(iKinLink self) -> bool"""
        return _icub.iKinLink_isBlocked(self)


    def getA(self):
        """getA(iKinLink self) -> double"""
        return _icub.iKinLink_getA(self)


    def setA(self, _A):
        """setA(iKinLink self, double const _A)"""
        return _icub.iKinLink_setA(self, _A)


    def getD(self):
        """getD(iKinLink self) -> double"""
        return _icub.iKinLink_getD(self)


    def setD(self, _D):
        """setD(iKinLink self, double const _D)"""
        return _icub.iKinLink_setD(self, _D)


    def getAlpha(self):
        """getAlpha(iKinLink self) -> double"""
        return _icub.iKinLink_getAlpha(self)


    def setAlpha(self, _Alpha):
        """setAlpha(iKinLink self, double const _Alpha)"""
        return _icub.iKinLink_setAlpha(self, _Alpha)


    def getOffset(self):
        """getOffset(iKinLink self) -> double"""
        return _icub.iKinLink_getOffset(self)


    def setOffset(self, _Offset):
        """setOffset(iKinLink self, double const _Offset)"""
        return _icub.iKinLink_setOffset(self, _Offset)


    def getMin(self):
        """getMin(iKinLink self) -> double"""
        return _icub.iKinLink_getMin(self)


    def setMin(self, _Min):
        """setMin(iKinLink self, double const _Min)"""
        return _icub.iKinLink_setMin(self, _Min)


    def getMax(self):
        """getMax(iKinLink self) -> double"""
        return _icub.iKinLink_getMax(self)


    def setMax(self, _Max):
        """setMax(iKinLink self, double const _Max)"""
        return _icub.iKinLink_setMax(self, _Max)


    def getAng(self):
        """getAng(iKinLink self) -> double"""
        return _icub.iKinLink_getAng(self)


    def setAng(self, _Ang):
        """setAng(iKinLink self, double _Ang) -> double"""
        return _icub.iKinLink_setAng(self, _Ang)


    def getH(self, *args):
        """
        getH(iKinLink self, bool c_override=False) -> Matrix
        getH(iKinLink self) -> Matrix
        getH(iKinLink self, double _Ang, bool c_override=False) -> Matrix
        getH(iKinLink self, double _Ang) -> Matrix
        """
        return _icub.iKinLink_getH(self, *args)


    def getDnH(self, n=1, c_override=False):
        """
        getDnH(iKinLink self, unsigned int n=1, bool c_override=False) -> Matrix
        getDnH(iKinLink self, unsigned int n=1) -> Matrix
        getDnH(iKinLink self) -> Matrix
        """
        return _icub.iKinLink_getDnH(self, n, c_override)

    __swig_destroy__ = _icub.delete_iKinLink
    __del__ = lambda self: None

    def setDAng(self, arg2):
        """setDAng(iKinLink self, double const arg2) -> double"""
        return _icub.iKinLink_setDAng(self, arg2)


    def setD2Ang(self, arg2):
        """setD2Ang(iKinLink self, double const arg2) -> double"""
        return _icub.iKinLink_setD2Ang(self, arg2)


    def setPosVelAcc(self, arg2, arg3, arg4):
        """setPosVelAcc(iKinLink self, double const arg2, double const arg3, double const arg4)"""
        return _icub.iKinLink_setPosVelAcc(self, arg2, arg3, arg4)


    def setDynamicParameters(self, *args):
        """
        setDynamicParameters(iKinLink self, double const arg2, Matrix arg3, Matrix arg4, double const arg5, double const arg6, double const arg7, double const arg8) -> bool
        setDynamicParameters(iKinLink self, double const arg2, Matrix arg3, Matrix arg4) -> bool
        """
        return _icub.iKinLink_setDynamicParameters(self, *args)


    def setStaticParameters(self, arg2, arg3):
        """setStaticParameters(iKinLink self, double const arg2, Matrix arg3) -> bool"""
        return _icub.iKinLink_setStaticParameters(self, arg2, arg3)


    def setInertia(self, arg2):
        """setInertia(iKinLink self, Matrix arg2) -> bool"""
        return _icub.iKinLink_setInertia(self, arg2)


    def setMass(self, arg2):
        """setMass(iKinLink self, double const arg2)"""
        return _icub.iKinLink_setMass(self, arg2)


    def setCOM(self, *args):
        """
        setCOM(iKinLink self, Matrix arg2) -> bool
        setCOM(iKinLink self, Vector arg2) -> bool
        """
        return _icub.iKinLink_setCOM(self, *args)


    def setForce(self, arg2, arg3):
        """setForce(iKinLink self, Vector arg2, Vector arg3) -> bool"""
        return _icub.iKinLink_setForce(self, arg2, arg3)


    def setMoment(self, arg2):
        """setMoment(iKinLink self, Vector arg2) -> bool"""
        return _icub.iKinLink_setMoment(self, arg2)


    def setTorque(self, arg2):
        """setTorque(iKinLink self, double const arg2)"""
        return _icub.iKinLink_setTorque(self, arg2)


    def getInertia(self):
        """getInertia(iKinLink self) -> Matrix"""
        return _icub.iKinLink_getInertia(self)


    def getMass(self):
        """getMass(iKinLink self) -> double"""
        return _icub.iKinLink_getMass(self)


    def getIm(self):
        """getIm(iKinLink self) -> double"""
        return _icub.iKinLink_getIm(self)


    def getKr(self):
        """getKr(iKinLink self) -> double"""
        return _icub.iKinLink_getKr(self)


    def getFs(self):
        """getFs(iKinLink self) -> double"""
        return _icub.iKinLink_getFs(self)


    def getFv(self):
        """getFv(iKinLink self) -> double"""
        return _icub.iKinLink_getFv(self)


    def getCOM(self):
        """getCOM(iKinLink self) -> Matrix"""
        return _icub.iKinLink_getCOM(self)


    def getDAng(self):
        """getDAng(iKinLink self) -> double"""
        return _icub.iKinLink_getDAng(self)


    def getD2Ang(self):
        """getD2Ang(iKinLink self) -> double"""
        return _icub.iKinLink_getD2Ang(self)


    def getR(self):
        """getR(iKinLink self) -> Matrix"""
        return _icub.iKinLink_getR(self)


    def getRC(self):
        """getRC(iKinLink self) -> Matrix"""
        return _icub.iKinLink_getRC(self)


    def getr(self):
        """getr(iKinLink self) -> Vector"""
        return _icub.iKinLink_getr(self)


    def getrC(self):
        """getrC(iKinLink self) -> Vector"""
        return _icub.iKinLink_getrC(self)


    def getW(self):
        """getW(iKinLink self) -> Vector"""
        return _icub.iKinLink_getW(self)


    def getdW(self):
        """getdW(iKinLink self) -> Vector"""
        return _icub.iKinLink_getdW(self)


    def getdWM(self):
        """getdWM(iKinLink self) -> Vector"""
        return _icub.iKinLink_getdWM(self)


    def getLinAcc(self):
        """getLinAcc(iKinLink self) -> Vector"""
        return _icub.iKinLink_getLinAcc(self)


    def getLinAccC(self):
        """getLinAccC(iKinLink self) -> Vector"""
        return _icub.iKinLink_getLinAccC(self)


    def getLinVel(self):
        """getLinVel(iKinLink self) -> Vector"""
        return _icub.iKinLink_getLinVel(self)


    def getLinVelC(self):
        """getLinVelC(iKinLink self) -> Vector"""
        return _icub.iKinLink_getLinVelC(self)


    def getForce(self):
        """getForce(iKinLink self) -> Vector"""
        return _icub.iKinLink_getForce(self)


    def getMoment(self):
        """getMoment(iKinLink self) -> Vector"""
        return _icub.iKinLink_getMoment(self)


    def getTorque(self):
        """getTorque(iKinLink self) -> double"""
        return _icub.iKinLink_getTorque(self)

iKinLink_swigregister = _icub.iKinLink_swigregister
iKinLink_swigregister(iKinLink)

class iKinChain(_object):
    """Proxy of C++ iCub::iKin::iKinChain class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iKinChain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iKinChain, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iKinChain self) -> iKinChain
        __init__(iCub::iKin::iKinChain self, iKinChain c) -> iKinChain
        """
        this = _icub.new_iKinChain(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __lshift__(self, l):
        """__lshift__(iKinChain self, iKinLink l) -> iKinChain"""
        return _icub.iKinChain___lshift__(self, l)


    def access(self, i):
        """access(iKinChain self, unsigned int const i) -> iKinLink"""
        return _icub.iKinChain_access(self, i)


    def addLink(self, i, l):
        """addLink(iKinChain self, unsigned int const i, iKinLink l) -> bool"""
        return _icub.iKinChain_addLink(self, i, l)


    def rmLink(self, i):
        """rmLink(iKinChain self, unsigned int const i) -> bool"""
        return _icub.iKinChain_rmLink(self, i)


    def pushLink(self, l):
        """pushLink(iKinChain self, iKinLink l)"""
        return _icub.iKinChain_pushLink(self, l)


    def clear(self):
        """clear(iKinChain self)"""
        return _icub.iKinChain_clear(self)


    def popLink(self):
        """popLink(iKinChain self)"""
        return _icub.iKinChain_popLink(self)


    def blockLink(self, *args):
        """
        blockLink(iKinChain self, unsigned int const i, double Ang) -> bool
        blockLink(iKinChain self, unsigned int const i) -> bool
        """
        return _icub.iKinChain_blockLink(self, *args)


    def setBlockingValue(self, i, Ang):
        """setBlockingValue(iKinChain self, unsigned int const i, double Ang) -> bool"""
        return _icub.iKinChain_setBlockingValue(self, i, Ang)


    def releaseLink(self, i):
        """releaseLink(iKinChain self, unsigned int const i) -> bool"""
        return _icub.iKinChain_releaseLink(self, i)


    def isLinkBlocked(self, i):
        """isLinkBlocked(iKinChain self, unsigned int const i) -> bool"""
        return _icub.iKinChain_isLinkBlocked(self, i)


    def setAllConstraints(self, _constrained):
        """setAllConstraints(iKinChain self, bool _constrained)"""
        return _icub.iKinChain_setAllConstraints(self, _constrained)


    def setConstraint(self, i, _constrained):
        """setConstraint(iKinChain self, unsigned int i, bool _constrained)"""
        return _icub.iKinChain_setConstraint(self, i, _constrained)


    def getConstraint(self, i):
        """getConstraint(iKinChain self, unsigned int i) -> bool"""
        return _icub.iKinChain_getConstraint(self, i)


    def setAllLinkVerbosity(self, _verbose):
        """setAllLinkVerbosity(iKinChain self, unsigned int _verbose)"""
        return _icub.iKinChain_setAllLinkVerbosity(self, _verbose)


    def setVerbosity(self, _verbose):
        """setVerbosity(iKinChain self, unsigned int _verbose)"""
        return _icub.iKinChain_setVerbosity(self, _verbose)


    def getVerbosity(self):
        """getVerbosity(iKinChain self) -> unsigned int"""
        return _icub.iKinChain_getVerbosity(self)


    def getN(self):
        """getN(iKinChain self) -> unsigned int"""
        return _icub.iKinChain_getN(self)


    def getDOF(self):
        """getDOF(iKinChain self) -> unsigned int"""
        return _icub.iKinChain_getDOF(self)


    def getH0(self):
        """getH0(iKinChain self) -> Matrix"""
        return _icub.iKinChain_getH0(self)


    def setH0(self, _H0):
        """setH0(iKinChain self, Matrix _H0) -> bool"""
        return _icub.iKinChain_setH0(self, _H0)


    def getHN(self):
        """getHN(iKinChain self) -> Matrix"""
        return _icub.iKinChain_getHN(self)


    def setHN(self, _HN):
        """setHN(iKinChain self, Matrix _HN) -> bool"""
        return _icub.iKinChain_setHN(self, _HN)


    def setAng(self, *args):
        """
        setAng(iKinChain self, Vector q) -> Vector
        setAng(iKinChain self, unsigned int const i, double _Ang) -> double
        """
        return _icub.iKinChain_setAng(self, *args)


    def getAng(self, *args):
        """
        getAng(iKinChain self) -> Vector
        getAng(iKinChain self, unsigned int const i) -> double
        """
        return _icub.iKinChain_getAng(self, *args)


    def getH(self, *args):
        """
        getH(iKinChain self, unsigned int const i, bool const allLink=False) -> Matrix
        getH(iKinChain self, unsigned int const i) -> Matrix
        getH(iKinChain self) -> Matrix
        getH(iKinChain self, Vector q) -> Matrix
        """
        return _icub.iKinChain_getH(self, *args)


    def Pose(self, i, axisRep=True):
        """
        Pose(iKinChain self, unsigned int const i, bool const axisRep=True) -> Vector
        Pose(iKinChain self, unsigned int const i) -> Vector
        """
        return _icub.iKinChain_Pose(self, i, axisRep)


    def Position(self, i):
        """Position(iKinChain self, unsigned int const i) -> Vector"""
        return _icub.iKinChain_Position(self, i)


    def EndEffPose(self, *args):
        """
        EndEffPose(iKinChain self, bool const axisRep=True) -> Vector
        EndEffPose(iKinChain self) -> Vector
        EndEffPose(iKinChain self, Vector q, bool const axisRep=True) -> Vector
        EndEffPose(iKinChain self, Vector q) -> Vector
        """
        return _icub.iKinChain_EndEffPose(self, *args)


    def EndEffPosition(self, *args):
        """
        EndEffPosition(iKinChain self) -> Vector
        EndEffPosition(iKinChain self, Vector q) -> Vector
        """
        return _icub.iKinChain_EndEffPosition(self, *args)


    def AnaJacobian(self, *args):
        """
        AnaJacobian(iKinChain self, unsigned int const i, unsigned int col) -> Matrix
        AnaJacobian(iKinChain self, unsigned int col=3) -> Matrix
        AnaJacobian(iKinChain self) -> Matrix
        AnaJacobian(iKinChain self, Vector q, unsigned int col=3) -> Matrix
        AnaJacobian(iKinChain self, Vector q) -> Matrix
        """
        return _icub.iKinChain_AnaJacobian(self, *args)


    def GeoJacobian(self, *args):
        """
        GeoJacobian(iKinChain self, unsigned int const i) -> Matrix
        GeoJacobian(iKinChain self) -> Matrix
        GeoJacobian(iKinChain self, Vector q) -> Matrix
        """
        return _icub.iKinChain_GeoJacobian(self, *args)


    def Hessian_ij(self, *args):
        """
        Hessian_ij(iKinChain self, unsigned int const i, unsigned int const j) -> Vector
        Hessian_ij(iKinChain self, unsigned int const lnk, unsigned int const i, unsigned int const j) -> Vector
        """
        return _icub.iKinChain_Hessian_ij(self, *args)


    def prepareForHessian(self, *args):
        """
        prepareForHessian(iKinChain self)
        prepareForHessian(iKinChain self, unsigned int const lnk)
        """
        return _icub.iKinChain_prepareForHessian(self, *args)


    def fastHessian_ij(self, *args):
        """
        fastHessian_ij(iKinChain self, unsigned int const i, unsigned int const j) -> Vector
        fastHessian_ij(iKinChain self, unsigned int const lnk, unsigned int const i, unsigned int const j) -> Vector
        """
        return _icub.iKinChain_fastHessian_ij(self, *args)


    def DJacobian(self, *args):
        """
        DJacobian(iKinChain self, Vector dq) -> Matrix
        DJacobian(iKinChain self, unsigned int const lnk, Vector dq) -> Matrix
        """
        return _icub.iKinChain_DJacobian(self, *args)

    __swig_destroy__ = _icub.delete_iKinChain
    __del__ = lambda self: None
iKinChain_swigregister = _icub.iKinChain_swigregister
iKinChain_swigregister(iKinChain)

class iKinLimb(iKinChain):
    """Proxy of C++ iCub::iKin::iKinLimb class."""

    __swig_setmethods__ = {}
    for _s in [iKinChain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iKinLimb, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinChain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iKinLimb, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iKinLimb self) -> iKinLimb
        __init__(iCub::iKin::iKinLimb self, std::string const & _type) -> iKinLimb
        __init__(iCub::iKin::iKinLimb self, iKinLimb limb) -> iKinLimb
        __init__(iCub::iKin::iKinLimb self, Property options) -> iKinLimb
        """
        this = _icub.new_iKinLimb(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def fromLinksProperties(self, options):
        """fromLinksProperties(iKinLimb self, Property options) -> bool"""
        return _icub.iKinLimb_fromLinksProperties(self, options)


    def toLinksProperties(self, options):
        """toLinksProperties(iKinLimb self, Property options) -> bool"""
        return _icub.iKinLimb_toLinksProperties(self, options)


    def isValid(self):
        """isValid(iKinLimb self) -> bool"""
        return _icub.iKinLimb_isValid(self)


    def asChain(self):
        """asChain(iKinLimb self) -> iKinChain"""
        return _icub.iKinLimb_asChain(self)


    def getType(self):
        """getType(iKinLimb self) -> std::string"""
        return _icub.iKinLimb_getType(self)


    def alignJointsBounds(self, arg2):
        """alignJointsBounds(iKinLimb self, std::deque< yarp::dev::IControlLimits * > const & arg2) -> bool"""
        return _icub.iKinLimb_alignJointsBounds(self, arg2)

    __swig_destroy__ = _icub.delete_iKinLimb
    __del__ = lambda self: None
iKinLimb_swigregister = _icub.iKinLimb_swigregister
iKinLimb_swigregister(iKinLimb)

class iCubTorso(iKinLimb):
    """Proxy of C++ iCub::iKin::iCubTorso class."""

    __swig_setmethods__ = {}
    for _s in [iKinLimb]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubTorso, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinLimb]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubTorso, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubTorso self) -> iCubTorso
        __init__(iCub::iKin::iCubTorso self, std::string const & _type) -> iCubTorso
        """
        this = _icub.new_iCubTorso(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def alignJointsBounds(self, lim):
        """alignJointsBounds(iCubTorso self, std::deque< yarp::dev::IControlLimits * > const & lim) -> bool"""
        return _icub.iCubTorso_alignJointsBounds(self, lim)

    __swig_destroy__ = _icub.delete_iCubTorso
    __del__ = lambda self: None
iCubTorso_swigregister = _icub.iCubTorso_swigregister
iCubTorso_swigregister(iCubTorso)

class iCubArm(iKinLimb):
    """Proxy of C++ iCub::iKin::iCubArm class."""

    __swig_setmethods__ = {}
    for _s in [iKinLimb]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubArm, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinLimb]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubArm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubArm self) -> iCubArm
        __init__(iCub::iKin::iCubArm self, std::string const & _type) -> iCubArm
        """
        this = _icub.new_iCubArm(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def alignJointsBounds(self, lim):
        """alignJointsBounds(iCubArm self, std::deque< yarp::dev::IControlLimits * > const & lim) -> bool"""
        return _icub.iCubArm_alignJointsBounds(self, lim)

    __swig_destroy__ = _icub.delete_iCubArm
    __del__ = lambda self: None
iCubArm_swigregister = _icub.iCubArm_swigregister
iCubArm_swigregister(iCubArm)

class iCubFinger(iKinLimb):
    """Proxy of C++ iCub::iKin::iCubFinger class."""

    __swig_setmethods__ = {}
    for _s in [iKinLimb]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubFinger, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinLimb]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubFinger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubFinger self) -> iCubFinger
        __init__(iCub::iKin::iCubFinger self, std::string const & _type) -> iCubFinger
        __init__(iCub::iKin::iCubFinger self, iCubFinger finger) -> iCubFinger
        """
        this = _icub.new_iCubFinger(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def alignJointsBounds(self, lim):
        """alignJointsBounds(iCubFinger self, std::deque< yarp::dev::IControlLimits * > const & lim) -> bool"""
        return _icub.iCubFinger_alignJointsBounds(self, lim)


    def getChainJoints(self, *args):
        """
        getChainJoints(iCubFinger self, Vector motorEncoders, Vector chainJoints) -> bool
        getChainJoints(iCubFinger self, Vector motorEncoders, Vector jointEncoders, Vector chainJoints, Matrix jointEncodersBounds) -> bool
        getChainJoints(iCubFinger self, Vector motorEncoders, Vector jointEncoders, Vector chainJoints) -> bool
        """
        return _icub.iCubFinger_getChainJoints(self, *args)

    __swig_destroy__ = _icub.delete_iCubFinger
    __del__ = lambda self: None
iCubFinger_swigregister = _icub.iCubFinger_swigregister
iCubFinger_swigregister(iCubFinger)

class iCubLeg(iKinLimb):
    """Proxy of C++ iCub::iKin::iCubLeg class."""

    __swig_setmethods__ = {}
    for _s in [iKinLimb]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubLeg, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinLimb]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubLeg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubLeg self) -> iCubLeg
        __init__(iCub::iKin::iCubLeg self, std::string const & _type) -> iCubLeg
        """
        this = _icub.new_iCubLeg(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def alignJointsBounds(self, lim):
        """alignJointsBounds(iCubLeg self, std::deque< yarp::dev::IControlLimits * > const & lim) -> bool"""
        return _icub.iCubLeg_alignJointsBounds(self, lim)

    __swig_destroy__ = _icub.delete_iCubLeg
    __del__ = lambda self: None
iCubLeg_swigregister = _icub.iCubLeg_swigregister
iCubLeg_swigregister(iCubLeg)

class iCubEye(iKinLimb):
    """Proxy of C++ iCub::iKin::iCubEye class."""

    __swig_setmethods__ = {}
    for _s in [iKinLimb]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubEye, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinLimb]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubEye, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubEye self) -> iCubEye
        __init__(iCub::iKin::iCubEye self, std::string const & _type) -> iCubEye
        """
        this = _icub.new_iCubEye(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def alignJointsBounds(self, lim):
        """alignJointsBounds(iCubEye self, std::deque< yarp::dev::IControlLimits * > const & lim) -> bool"""
        return _icub.iCubEye_alignJointsBounds(self, lim)

    __swig_destroy__ = _icub.delete_iCubEye
    __del__ = lambda self: None
iCubEye_swigregister = _icub.iCubEye_swigregister
iCubEye_swigregister(iCubEye)

class iCubEyeNeckRef(iCubEye):
    """Proxy of C++ iCub::iKin::iCubEyeNeckRef class."""

    __swig_setmethods__ = {}
    for _s in [iCubEye]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubEyeNeckRef, name, value)
    __swig_getmethods__ = {}
    for _s in [iCubEye]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubEyeNeckRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubEyeNeckRef self) -> iCubEyeNeckRef
        __init__(iCub::iKin::iCubEyeNeckRef self, std::string const & _type) -> iCubEyeNeckRef
        """
        this = _icub.new_iCubEyeNeckRef(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _icub.delete_iCubEyeNeckRef
    __del__ = lambda self: None
iCubEyeNeckRef_swigregister = _icub.iCubEyeNeckRef_swigregister
iCubEyeNeckRef_swigregister(iCubEyeNeckRef)

class iCubHeadCenter(iCubEye):
    """Proxy of C++ iCub::iKin::iCubHeadCenter class."""

    __swig_setmethods__ = {}
    for _s in [iCubEye]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubHeadCenter, name, value)
    __swig_getmethods__ = {}
    for _s in [iCubEye]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubHeadCenter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubHeadCenter self) -> iCubHeadCenter
        __init__(iCub::iKin::iCubHeadCenter self, std::string const & _type) -> iCubHeadCenter
        """
        this = _icub.new_iCubHeadCenter(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _icub.delete_iCubHeadCenter
    __del__ = lambda self: None
iCubHeadCenter_swigregister = _icub.iCubHeadCenter_swigregister
iCubHeadCenter_swigregister(iCubHeadCenter)

class iCubInertialSensor(iKinLimb):
    """Proxy of C++ iCub::iKin::iCubInertialSensor class."""

    __swig_setmethods__ = {}
    for _s in [iKinLimb]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubInertialSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinLimb]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubInertialSensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubInertialSensor self) -> iCubInertialSensor
        __init__(iCub::iKin::iCubInertialSensor self, std::string const & _type) -> iCubInertialSensor
        """
        this = _icub.new_iCubInertialSensor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def alignJointsBounds(self, lim):
        """alignJointsBounds(iCubInertialSensor self, std::deque< yarp::dev::IControlLimits * > const & lim) -> bool"""
        return _icub.iCubInertialSensor_alignJointsBounds(self, lim)

    __swig_destroy__ = _icub.delete_iCubInertialSensor
    __del__ = lambda self: None
iCubInertialSensor_swigregister = _icub.iCubInertialSensor_swigregister
iCubInertialSensor_swigregister(iCubInertialSensor)


_icub.IKIN_ALMOST_ZERO_swigconstant(_icub)
IKIN_ALMOST_ZERO = _icub.IKIN_ALMOST_ZERO
class CartesianHelper(_object):
    """Proxy of C++ iCub::iKin::CartesianHelper class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CartesianHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CartesianHelper, name)
    __repr__ = _swig_repr

    def addTargetOption(b, xd):
        """addTargetOption(Bottle b, Vector xd)"""
        return _icub.CartesianHelper_addTargetOption(b, xd)

    if _newclass:
        addTargetOption = staticmethod(addTargetOption)
    __swig_getmethods__["addTargetOption"] = lambda x: addTargetOption

    def addDOFOption(b, dof):
        """addDOFOption(Bottle b, Vector dof)"""
        return _icub.CartesianHelper_addDOFOption(b, dof)

    if _newclass:
        addDOFOption = staticmethod(addDOFOption)
    __swig_getmethods__["addDOFOption"] = lambda x: addDOFOption

    def addJointsResPosOption(b, restPos):
        """addJointsResPosOption(Bottle b, Vector restPos)"""
        return _icub.CartesianHelper_addJointsResPosOption(b, restPos)

    if _newclass:
        addJointsResPosOption = staticmethod(addJointsResPosOption)
    __swig_getmethods__["addJointsResPosOption"] = lambda x: addJointsResPosOption

    def addJointsRestWeightsOption(b, restWeights):
        """addJointsRestWeightsOption(Bottle b, Vector restWeights)"""
        return _icub.CartesianHelper_addJointsRestWeightsOption(b, restWeights)

    if _newclass:
        addJointsRestWeightsOption = staticmethod(addJointsRestWeightsOption)
    __swig_getmethods__["addJointsRestWeightsOption"] = lambda x: addJointsRestWeightsOption

    def addPoseOption(b, pose):
        """addPoseOption(Bottle b, unsigned int const pose)"""
        return _icub.CartesianHelper_addPoseOption(b, pose)

    if _newclass:
        addPoseOption = staticmethod(addPoseOption)
    __swig_getmethods__["addPoseOption"] = lambda x: addPoseOption

    def addModeOption(b, tracking):
        """addModeOption(Bottle b, bool const tracking)"""
        return _icub.CartesianHelper_addModeOption(b, tracking)

    if _newclass:
        addModeOption = staticmethod(addModeOption)
    __swig_getmethods__["addModeOption"] = lambda x: addModeOption

    def addTokenOption(b, token):
        """addTokenOption(Bottle b, double const token)"""
        return _icub.CartesianHelper_addTokenOption(b, token)

    if _newclass:
        addTokenOption = staticmethod(addTokenOption)
    __swig_getmethods__["addTokenOption"] = lambda x: addTokenOption

    def getTargetOption(b):
        """getTargetOption(Bottle b) -> Bottle"""
        return _icub.CartesianHelper_getTargetOption(b)

    if _newclass:
        getTargetOption = staticmethod(getTargetOption)
    __swig_getmethods__["getTargetOption"] = lambda x: getTargetOption

    def getEndEffectorPoseOption(b):
        """getEndEffectorPoseOption(Bottle b) -> Bottle"""
        return _icub.CartesianHelper_getEndEffectorPoseOption(b)

    if _newclass:
        getEndEffectorPoseOption = staticmethod(getEndEffectorPoseOption)
    __swig_getmethods__["getEndEffectorPoseOption"] = lambda x: getEndEffectorPoseOption

    def getJointsOption(b):
        """getJointsOption(Bottle b) -> Bottle"""
        return _icub.CartesianHelper_getJointsOption(b)

    if _newclass:
        getJointsOption = staticmethod(getJointsOption)
    __swig_getmethods__["getJointsOption"] = lambda x: getJointsOption

    def getTokenOption(b, token):
        """getTokenOption(Bottle b, double * token) -> bool"""
        return _icub.CartesianHelper_getTokenOption(b, token)

    if _newclass:
        getTokenOption = staticmethod(getTokenOption)
    __swig_getmethods__["getTokenOption"] = lambda x: getTokenOption

    def computeFixationPointData(*args):
        """
        computeFixationPointData(iKinChain eyeL, iKinChain eyeR, Vector fp) -> bool
        computeFixationPointData(iKinChain eyeL, iKinChain eyeR, Vector fp, Matrix J) -> bool
        """
        return _icub.CartesianHelper_computeFixationPointData(*args)

    if _newclass:
        computeFixationPointData = staticmethod(computeFixationPointData)
    __swig_getmethods__["computeFixationPointData"] = lambda x: computeFixationPointData

    def __init__(self):
        """__init__(iCub::iKin::CartesianHelper self) -> CartesianHelper"""
        this = _icub.new_CartesianHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _icub.delete_CartesianHelper
    __del__ = lambda self: None
CartesianHelper_swigregister = _icub.CartesianHelper_swigregister
CartesianHelper_swigregister(CartesianHelper)

def CartesianHelper_addTargetOption(b, xd):
    """CartesianHelper_addTargetOption(Bottle b, Vector xd)"""
    return _icub.CartesianHelper_addTargetOption(b, xd)

def CartesianHelper_addDOFOption(b, dof):
    """CartesianHelper_addDOFOption(Bottle b, Vector dof)"""
    return _icub.CartesianHelper_addDOFOption(b, dof)

def CartesianHelper_addJointsResPosOption(b, restPos):
    """CartesianHelper_addJointsResPosOption(Bottle b, Vector restPos)"""
    return _icub.CartesianHelper_addJointsResPosOption(b, restPos)

def CartesianHelper_addJointsRestWeightsOption(b, restWeights):
    """CartesianHelper_addJointsRestWeightsOption(Bottle b, Vector restWeights)"""
    return _icub.CartesianHelper_addJointsRestWeightsOption(b, restWeights)

def CartesianHelper_addPoseOption(b, pose):
    """CartesianHelper_addPoseOption(Bottle b, unsigned int const pose)"""
    return _icub.CartesianHelper_addPoseOption(b, pose)

def CartesianHelper_addModeOption(b, tracking):
    """CartesianHelper_addModeOption(Bottle b, bool const tracking)"""
    return _icub.CartesianHelper_addModeOption(b, tracking)

def CartesianHelper_addTokenOption(b, token):
    """CartesianHelper_addTokenOption(Bottle b, double const token)"""
    return _icub.CartesianHelper_addTokenOption(b, token)

def CartesianHelper_getTargetOption(b):
    """CartesianHelper_getTargetOption(Bottle b) -> Bottle"""
    return _icub.CartesianHelper_getTargetOption(b)

def CartesianHelper_getEndEffectorPoseOption(b):
    """CartesianHelper_getEndEffectorPoseOption(Bottle b) -> Bottle"""
    return _icub.CartesianHelper_getEndEffectorPoseOption(b)

def CartesianHelper_getJointsOption(b):
    """CartesianHelper_getJointsOption(Bottle b) -> Bottle"""
    return _icub.CartesianHelper_getJointsOption(b)

def CartesianHelper_getTokenOption(b, token):
    """CartesianHelper_getTokenOption(Bottle b, double * token) -> bool"""
    return _icub.CartesianHelper_getTokenOption(b, token)

def CartesianHelper_computeFixationPointData(*args):
    """
    computeFixationPointData(iKinChain eyeL, iKinChain eyeR, Vector fp) -> bool
    CartesianHelper_computeFixationPointData(iKinChain eyeL, iKinChain eyeR, Vector fp, Matrix J) -> bool
    """
    return _icub.CartesianHelper_computeFixationPointData(*args)


_icub.IKINCTRL_STATE_RUNNING_swigconstant(_icub)
IKINCTRL_STATE_RUNNING = _icub.IKINCTRL_STATE_RUNNING

_icub.IKINCTRL_STATE_INTARGET_swigconstant(_icub)
IKINCTRL_STATE_INTARGET = _icub.IKINCTRL_STATE_INTARGET

_icub.IKINCTRL_STATE_DEADLOCK_swigconstant(_icub)
IKINCTRL_STATE_DEADLOCK = _icub.IKINCTRL_STATE_DEADLOCK

_icub.IKINCTRL_POSE_FULL_swigconstant(_icub)
IKINCTRL_POSE_FULL = _icub.IKINCTRL_POSE_FULL

_icub.IKINCTRL_POSE_XYZ_swigconstant(_icub)
IKINCTRL_POSE_XYZ = _icub.IKINCTRL_POSE_XYZ

_icub.IKINCTRL_POSE_ANG_swigconstant(_icub)
IKINCTRL_POSE_ANG = _icub.IKINCTRL_POSE_ANG

_icub.IKINCTRL_STEEP_JT_swigconstant(_icub)
IKINCTRL_STEEP_JT = _icub.IKINCTRL_STEEP_JT

_icub.IKINCTRL_STEEP_PINV_swigconstant(_icub)
IKINCTRL_STEEP_PINV = _icub.IKINCTRL_STEEP_PINV

_icub.IKINCTRL_RET_TOLX_swigconstant(_icub)
IKINCTRL_RET_TOLX = _icub.IKINCTRL_RET_TOLX

_icub.IKINCTRL_RET_TOLSIZE_swigconstant(_icub)
IKINCTRL_RET_TOLSIZE = _icub.IKINCTRL_RET_TOLSIZE

_icub.IKINCTRL_RET_TOLQ_swigconstant(_icub)
IKINCTRL_RET_TOLQ = _icub.IKINCTRL_RET_TOLQ

_icub.IKINCTRL_RET_MAXITER_swigconstant(_icub)
IKINCTRL_RET_MAXITER = _icub.IKINCTRL_RET_MAXITER

_icub.IKINCTRL_RET_EXHALT_swigconstant(_icub)
IKINCTRL_RET_EXHALT = _icub.IKINCTRL_RET_EXHALT

_icub.IKINCTRL_DISABLED_swigconstant(_icub)
IKINCTRL_DISABLED = _icub.IKINCTRL_DISABLED
class iKinCtrl(_object):
    """Proxy of C++ iCub::iKin::iKinCtrl class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iKinCtrl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iKinCtrl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setChainConstraints(self, _constrained):
        """setChainConstraints(iKinCtrl self, bool _constrained)"""
        return _icub.iKinCtrl_setChainConstraints(self, _constrained)


    def iterate(self, xd, verbose=0):
        """
        iterate(iKinCtrl self, Vector xd, unsigned int const verbose=0) -> Vector
        iterate(iKinCtrl self, Vector xd) -> Vector
        """
        return _icub.iKinCtrl_iterate(self, xd, verbose)


    def solve(self, xd, tol_size=-1, max_iter=-1, verbose=0, exit_code=None, exhalt=None):
        """
        solve(iKinCtrl self, Vector xd, double const tol_size=-1, int const max_iter=-1, unsigned int const verbose=0, int * exit_code=None, bool * exhalt=None) -> Vector
        solve(iKinCtrl self, Vector xd, double const tol_size=-1, int const max_iter=-1, unsigned int const verbose=0, int * exit_code=None) -> Vector
        solve(iKinCtrl self, Vector xd, double const tol_size=-1, int const max_iter=-1, unsigned int const verbose=0) -> Vector
        solve(iKinCtrl self, Vector xd, double const tol_size=-1, int const max_iter=-1) -> Vector
        solve(iKinCtrl self, Vector xd, double const tol_size=-1) -> Vector
        solve(iKinCtrl self, Vector xd) -> Vector
        """
        return _icub.iKinCtrl_solve(self, xd, tol_size, max_iter, verbose, exit_code, exhalt)


    def test_convergence(self, tol_size):
        """test_convergence(iKinCtrl self, double const tol_size) -> bool"""
        return _icub.iKinCtrl_test_convergence(self, tol_size)


    def restart(self, q0):
        """restart(iKinCtrl self, Vector q0)"""
        return _icub.iKinCtrl_restart(self, q0)


    def getAlgoName(self):
        """getAlgoName(iKinCtrl self) -> std::string"""
        return _icub.iKinCtrl_getAlgoName(self)


    def switchWatchDog(self, sw):
        """switchWatchDog(iKinCtrl self, bool sw)"""
        return _icub.iKinCtrl_switchWatchDog(self, sw)


    def setInTargetTol(self, tol_x):
        """setInTargetTol(iKinCtrl self, double tol_x)"""
        return _icub.iKinCtrl_setInTargetTol(self, tol_x)


    def getInTargetTol(self):
        """getInTargetTol(iKinCtrl self) -> double"""
        return _icub.iKinCtrl_getInTargetTol(self)


    def setWatchDogTol(self, tol_q):
        """setWatchDogTol(iKinCtrl self, double tol_q)"""
        return _icub.iKinCtrl_setWatchDogTol(self, tol_q)


    def getWatchDogTol(self):
        """getWatchDogTol(iKinCtrl self) -> double"""
        return _icub.iKinCtrl_getWatchDogTol(self)


    def setWatchDogMaxIter(self, maxIter):
        """setWatchDogMaxIter(iKinCtrl self, int maxIter)"""
        return _icub.iKinCtrl_setWatchDogMaxIter(self, maxIter)


    def getWatchDogMaxIter(self):
        """getWatchDogMaxIter(iKinCtrl self) -> int"""
        return _icub.iKinCtrl_getWatchDogMaxIter(self)


    def isInTarget(self):
        """isInTarget(iKinCtrl self) -> bool"""
        return _icub.iKinCtrl_isInTarget(self)


    def get_state(self):
        """get_state(iKinCtrl self) -> int"""
        return _icub.iKinCtrl_get_state(self)


    def set_ctrlPose(self, _ctrlPose):
        """set_ctrlPose(iKinCtrl self, unsigned int _ctrlPose)"""
        return _icub.iKinCtrl_set_ctrlPose(self, _ctrlPose)


    def get_ctrlPose(self):
        """get_ctrlPose(iKinCtrl self) -> unsigned int"""
        return _icub.iKinCtrl_get_ctrlPose(self)


    def get_dim(self):
        """get_dim(iKinCtrl self) -> unsigned int"""
        return _icub.iKinCtrl_get_dim(self)


    def get_iter(self):
        """get_iter(iKinCtrl self) -> unsigned int"""
        return _icub.iKinCtrl_get_iter(self)


    def get_x(self):
        """get_x(iKinCtrl self) -> Vector"""
        return _icub.iKinCtrl_get_x(self)


    def get_e(self):
        """get_e(iKinCtrl self) -> Vector"""
        return _icub.iKinCtrl_get_e(self)


    def set_q(self, q0):
        """set_q(iKinCtrl self, Vector q0)"""
        return _icub.iKinCtrl_set_q(self, q0)


    def get_q(self):
        """get_q(iKinCtrl self) -> Vector"""
        return _icub.iKinCtrl_get_q(self)


    def get_grad(self):
        """get_grad(iKinCtrl self) -> Vector"""
        return _icub.iKinCtrl_get_grad(self)


    def get_J(self):
        """get_J(iKinCtrl self) -> Matrix"""
        return _icub.iKinCtrl_get_J(self)


    def dist(self):
        """dist(iKinCtrl self) -> double"""
        return _icub.iKinCtrl_dist(self)

    __swig_destroy__ = _icub.delete_iKinCtrl
    __del__ = lambda self: None
iKinCtrl_swigregister = _icub.iKinCtrl_swigregister
iKinCtrl_swigregister(iKinCtrl)

class SteepCtrl(iKinCtrl):
    """Proxy of C++ iCub::iKin::SteepCtrl class."""

    __swig_setmethods__ = {}
    for _s in [iKinCtrl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteepCtrl, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinCtrl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SteepCtrl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def computeGPM(self):
        """computeGPM(SteepCtrl self) -> Vector"""
        return _icub.SteepCtrl_computeGPM(self)


    def setChainConstraints(self, _constrained):
        """setChainConstraints(SteepCtrl self, bool _constrained)"""
        return _icub.SteepCtrl_setChainConstraints(self, _constrained)


    def iterate(self, xd, verbose=0):
        """
        iterate(SteepCtrl self, Vector xd, unsigned int const verbose=0) -> Vector
        iterate(SteepCtrl self, Vector xd) -> Vector
        """
        return _icub.SteepCtrl_iterate(self, xd, verbose)


    def restart(self, q0):
        """restart(SteepCtrl self, Vector q0)"""
        return _icub.SteepCtrl_restart(self, q0)


    def test_convergence(self, tol_size):
        """test_convergence(SteepCtrl self, double const tol_size) -> bool"""
        return _icub.SteepCtrl_test_convergence(self, tol_size)


    def getAlgoName(self):
        """getAlgoName(SteepCtrl self) -> std::string"""
        return _icub.SteepCtrl_getAlgoName(self)


    def resetInt(self):
        """resetInt(SteepCtrl self)"""
        return _icub.SteepCtrl_resetInt(self)


    def get_qdot(self):
        """get_qdot(SteepCtrl self) -> Vector"""
        return _icub.SteepCtrl_get_qdot(self)


    def get_gpm(self):
        """get_gpm(SteepCtrl self) -> Vector"""
        return _icub.SteepCtrl_get_gpm(self)


    def get_Kp(self):
        """get_Kp(SteepCtrl self) -> double"""
        return _icub.SteepCtrl_get_Kp(self)

    __swig_destroy__ = _icub.delete_SteepCtrl
    __del__ = lambda self: None
SteepCtrl_swigregister = _icub.SteepCtrl_swigregister
SteepCtrl_swigregister(SteepCtrl)

class VarKpSteepCtrl(SteepCtrl):
    """Proxy of C++ iCub::iKin::VarKpSteepCtrl class."""

    __swig_setmethods__ = {}
    for _s in [SteepCtrl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarKpSteepCtrl, name, value)
    __swig_getmethods__ = {}
    for _s in [SteepCtrl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarKpSteepCtrl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def restart(self, q0):
        """restart(VarKpSteepCtrl self, Vector q0)"""
        return _icub.VarKpSteepCtrl_restart(self, q0)


    def getAlgoName(self):
        """getAlgoName(VarKpSteepCtrl self) -> std::string"""
        return _icub.VarKpSteepCtrl_getAlgoName(self)

    __swig_destroy__ = _icub.delete_VarKpSteepCtrl
    __del__ = lambda self: None
VarKpSteepCtrl_swigregister = _icub.VarKpSteepCtrl_swigregister
VarKpSteepCtrl_swigregister(VarKpSteepCtrl)

class LMCtrl(iKinCtrl):
    """Proxy of C++ iCub::iKin::LMCtrl class."""

    __swig_setmethods__ = {}
    for _s in [iKinCtrl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LMCtrl, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinCtrl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LMCtrl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def computeGPM(self):
        """computeGPM(LMCtrl self) -> Vector"""
        return _icub.LMCtrl_computeGPM(self)


    def setChainConstraints(self, _constrained):
        """setChainConstraints(LMCtrl self, bool _constrained)"""
        return _icub.LMCtrl_setChainConstraints(self, _constrained)


    def iterate(self, xd, verbose=0):
        """
        iterate(LMCtrl self, Vector xd, unsigned int const verbose=0) -> Vector
        iterate(LMCtrl self, Vector xd) -> Vector
        """
        return _icub.LMCtrl_iterate(self, xd, verbose)


    def restart(self, q0):
        """restart(LMCtrl self, Vector q0)"""
        return _icub.LMCtrl_restart(self, q0)


    def test_convergence(self, tol_size):
        """test_convergence(LMCtrl self, double const tol_size) -> bool"""
        return _icub.LMCtrl_test_convergence(self, tol_size)


    def getAlgoName(self):
        """getAlgoName(LMCtrl self) -> std::string"""
        return _icub.LMCtrl_getAlgoName(self)


    def resetInt(self):
        """resetInt(LMCtrl self)"""
        return _icub.LMCtrl_resetInt(self)


    def get_qdot(self):
        """get_qdot(LMCtrl self) -> Vector"""
        return _icub.LMCtrl_get_qdot(self)


    def get_gpm(self):
        """get_gpm(LMCtrl self) -> Vector"""
        return _icub.LMCtrl_get_gpm(self)


    def get_mu(self):
        """get_mu(LMCtrl self) -> double"""
        return _icub.LMCtrl_get_mu(self)


    def reset_mu(self):
        """reset_mu(LMCtrl self)"""
        return _icub.LMCtrl_reset_mu(self)

    __swig_destroy__ = _icub.delete_LMCtrl
    __del__ = lambda self: None
LMCtrl_swigregister = _icub.LMCtrl_swigregister
LMCtrl_swigregister(LMCtrl)

class LMCtrl_GPM(LMCtrl):
    """Proxy of C++ iCub::iKin::LMCtrl_GPM class."""

    __swig_setmethods__ = {}
    for _s in [LMCtrl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LMCtrl_GPM, name, value)
    __swig_getmethods__ = {}
    for _s in [LMCtrl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LMCtrl_GPM, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def computeGPM(self):
        """computeGPM(LMCtrl_GPM self) -> Vector"""
        return _icub.LMCtrl_GPM_computeGPM(self)


    def set_K(self, _K):
        """set_K(LMCtrl_GPM self, double const _K)"""
        return _icub.LMCtrl_GPM_set_K(self, _K)


    def get_K(self):
        """get_K(LMCtrl_GPM self) -> double"""
        return _icub.LMCtrl_GPM_get_K(self)


    def set_safeAreaRatio(self, _safeAreaRatio):
        """set_safeAreaRatio(LMCtrl_GPM self, double const _safeAreaRatio)"""
        return _icub.LMCtrl_GPM_set_safeAreaRatio(self, _safeAreaRatio)


    def get_safeAreaRatio(self):
        """get_safeAreaRatio(LMCtrl_GPM self) -> double"""
        return _icub.LMCtrl_GPM_get_safeAreaRatio(self)

    __swig_destroy__ = _icub.delete_LMCtrl_GPM
    __del__ = lambda self: None
LMCtrl_GPM_swigregister = _icub.LMCtrl_GPM_swigregister
LMCtrl_GPM_swigregister(LMCtrl_GPM)

class MultiRefMinJerkCtrl(iKinCtrl):
    """Proxy of C++ iCub::iKin::MultiRefMinJerkCtrl class."""

    __swig_setmethods__ = {}
    for _s in [iKinCtrl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiRefMinJerkCtrl, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinCtrl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiRefMinJerkCtrl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def iterate(self, *args):
        """
        iterate(MultiRefMinJerkCtrl self, Vector xd, Vector qd, unsigned int const verbose=0) -> Vector
        iterate(MultiRefMinJerkCtrl self, Vector xd, Vector qd) -> Vector
        iterate(MultiRefMinJerkCtrl self, Vector xd, Vector qd, Vector xdot_set, unsigned int const verbose=0) -> Vector
        iterate(MultiRefMinJerkCtrl self, Vector xd, Vector qd, Vector xdot_set) -> Vector
        """
        return _icub.MultiRefMinJerkCtrl_iterate(self, *args)


    def restart(self, q0):
        """restart(MultiRefMinJerkCtrl self, Vector q0)"""
        return _icub.MultiRefMinJerkCtrl_restart(self, q0)


    def getAlgoName(self):
        """getAlgoName(MultiRefMinJerkCtrl self) -> std::string"""
        return _icub.MultiRefMinJerkCtrl_getAlgoName(self)


    def get_guardRatio(self):
        """get_guardRatio(MultiRefMinJerkCtrl self) -> double"""
        return _icub.MultiRefMinJerkCtrl_get_guardRatio(self)


    def get_gamma(self):
        """get_gamma(MultiRefMinJerkCtrl self) -> double"""
        return _icub.MultiRefMinJerkCtrl_get_gamma(self)


    def get_execTime(self):
        """get_execTime(MultiRefMinJerkCtrl self) -> double"""
        return _icub.MultiRefMinJerkCtrl_get_execTime(self)


    def get_qdot(self):
        """get_qdot(MultiRefMinJerkCtrl self) -> Vector"""
        return _icub.MultiRefMinJerkCtrl_get_qdot(self)


    def get_xdot(self):
        """get_xdot(MultiRefMinJerkCtrl self) -> Vector"""
        return _icub.MultiRefMinJerkCtrl_get_xdot(self)


    def set_guardRatio(self, _guardRatio):
        """set_guardRatio(MultiRefMinJerkCtrl self, double _guardRatio)"""
        return _icub.MultiRefMinJerkCtrl_set_guardRatio(self, _guardRatio)


    def set_gamma(self, _gamma):
        """set_gamma(MultiRefMinJerkCtrl self, double _gamma)"""
        return _icub.MultiRefMinJerkCtrl_set_gamma(self, _gamma)


    def set_q(self, q0):
        """set_q(MultiRefMinJerkCtrl self, Vector q0)"""
        return _icub.MultiRefMinJerkCtrl_set_q(self, q0)


    def set_execTime(self, _execTime, warn=False):
        """
        set_execTime(MultiRefMinJerkCtrl self, double const _execTime, bool const warn=False) -> double
        set_execTime(MultiRefMinJerkCtrl self, double const _execTime) -> double
        """
        return _icub.MultiRefMinJerkCtrl_set_execTime(self, _execTime, warn)


    def add_compensation(self, comp):
        """add_compensation(MultiRefMinJerkCtrl self, Vector comp)"""
        return _icub.MultiRefMinJerkCtrl_add_compensation(self, comp)


    def setPlantParameters(self, *args):
        """
        setPlantParameters(MultiRefMinJerkCtrl self, Property parameters, std::string const & entryTag)
        setPlantParameters(MultiRefMinJerkCtrl self, Property parameters)
        """
        return _icub.MultiRefMinJerkCtrl_setPlantParameters(self, *args)

    __swig_destroy__ = _icub.delete_MultiRefMinJerkCtrl
    __del__ = lambda self: None
MultiRefMinJerkCtrl_swigregister = _icub.MultiRefMinJerkCtrl_swigregister
MultiRefMinJerkCtrl_swigregister(MultiRefMinJerkCtrl)

class iKinIterateCallback(_object):
    """Proxy of C++ iCub::iKin::iKinIterateCallback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iKinIterateCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iKinIterateCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def _exec(self, xd, q):
        """_exec(iKinIterateCallback self, Vector xd, Vector q)"""
        return _icub.iKinIterateCallback__exec(self, xd, q)

    __swig_destroy__ = _icub.delete_iKinIterateCallback
    __del__ = lambda self: None
iKinIterateCallback_swigregister = _icub.iKinIterateCallback_swigregister
iKinIterateCallback_swigregister(iKinIterateCallback)

class iKinLinIneqConstr(_object):
    """Proxy of C++ iCub::iKin::iKinLinIneqConstr class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iKinLinIneqConstr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iKinLinIneqConstr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iKinLinIneqConstr self) -> iKinLinIneqConstr
        __init__(iCub::iKin::iKinLinIneqConstr self, double const _lowerBoundInf, double const _upperBoundInf) -> iKinLinIneqConstr
        __init__(iCub::iKin::iKinLinIneqConstr self, iKinLinIneqConstr obj) -> iKinLinIneqConstr
        """
        this = _icub.new_iKinLinIneqConstr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getC(self):
        """getC(iKinLinIneqConstr self) -> Matrix"""
        return _icub.iKinLinIneqConstr_getC(self)


    def getuB(self):
        """getuB(iKinLinIneqConstr self) -> Vector"""
        return _icub.iKinLinIneqConstr_getuB(self)


    def getlB(self):
        """getlB(iKinLinIneqConstr self) -> Vector"""
        return _icub.iKinLinIneqConstr_getlB(self)


    def getLowerBoundInf(self):
        """getLowerBoundInf(iKinLinIneqConstr self) -> double &"""
        return _icub.iKinLinIneqConstr_getLowerBoundInf(self)


    def getUpperBoundInf(self):
        """getUpperBoundInf(iKinLinIneqConstr self) -> double &"""
        return _icub.iKinLinIneqConstr_getUpperBoundInf(self)


    def isActive(self):
        """isActive(iKinLinIneqConstr self) -> bool"""
        return _icub.iKinLinIneqConstr_isActive(self)


    def setActive(self, _active):
        """setActive(iKinLinIneqConstr self, bool _active)"""
        return _icub.iKinLinIneqConstr_setActive(self, _active)


    def update(self, arg2):
        """update(iKinLinIneqConstr self, void * arg2)"""
        return _icub.iKinLinIneqConstr_update(self, arg2)

    __swig_destroy__ = _icub.delete_iKinLinIneqConstr
    __del__ = lambda self: None
iKinLinIneqConstr_swigregister = _icub.iKinLinIneqConstr_swigregister
iKinLinIneqConstr_swigregister(iKinLinIneqConstr)

class iCubShoulderConstr(iKinLinIneqConstr):
    """Proxy of C++ iCub::iKin::iCubShoulderConstr class."""

    __swig_setmethods__ = {}
    for _s in [iKinLinIneqConstr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubShoulderConstr, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinLinIneqConstr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubShoulderConstr, name)
    __repr__ = _swig_repr

    def __init__(self, arm):
        """__init__(iCub::iKin::iCubShoulderConstr self, iCubArm arm) -> iCubShoulderConstr"""
        this = _icub.new_iCubShoulderConstr(arm)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def update(self, arg2):
        """update(iCubShoulderConstr self, void * arg2)"""
        return _icub.iCubShoulderConstr_update(self, arg2)

    __swig_destroy__ = _icub.delete_iCubShoulderConstr
    __del__ = lambda self: None
iCubShoulderConstr_swigregister = _icub.iCubShoulderConstr_swigregister
iCubShoulderConstr_swigregister(iCubShoulderConstr)

class iKinIpOptMin(_object):
    """Proxy of C++ iCub::iKin::iKinIpOptMin class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iKinIpOptMin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iKinIpOptMin, name)
    __repr__ = _swig_repr

    def __init__(self, c, _ctrlPose, tol, constr_tol, max_iter=-1, verbose=0, useHessian=True):
        """
        __init__(iCub::iKin::iKinIpOptMin self, iKinChain c, unsigned int const _ctrlPose, double const tol, double const constr_tol, int const max_iter=-1, unsigned int const verbose=0, bool useHessian=True) -> iKinIpOptMin
        __init__(iCub::iKin::iKinIpOptMin self, iKinChain c, unsigned int const _ctrlPose, double const tol, double const constr_tol, int const max_iter=-1, unsigned int const verbose=0) -> iKinIpOptMin
        __init__(iCub::iKin::iKinIpOptMin self, iKinChain c, unsigned int const _ctrlPose, double const tol, double const constr_tol, int const max_iter=-1) -> iKinIpOptMin
        __init__(iCub::iKin::iKinIpOptMin self, iKinChain c, unsigned int const _ctrlPose, double const tol, double const constr_tol) -> iKinIpOptMin
        """
        this = _icub.new_iKinIpOptMin(c, _ctrlPose, tol, constr_tol, max_iter, verbose, useHessian)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set_ctrlPose(self, _ctrlPose):
        """set_ctrlPose(iKinIpOptMin self, unsigned int const _ctrlPose)"""
        return _icub.iKinIpOptMin_set_ctrlPose(self, _ctrlPose)


    def get_ctrlPose(self):
        """get_ctrlPose(iKinIpOptMin self) -> unsigned int"""
        return _icub.iKinIpOptMin_get_ctrlPose(self)


    def set_posePriority(self, priority):
        """set_posePriority(iKinIpOptMin self, std::string const & priority) -> bool"""
        return _icub.iKinIpOptMin_set_posePriority(self, priority)


    def get_posePriority(self):
        """get_posePriority(iKinIpOptMin self) -> std::string"""
        return _icub.iKinIpOptMin_get_posePriority(self)


    def attachLIC(self, lic):
        """attachLIC(iKinIpOptMin self, iKinLinIneqConstr lic)"""
        return _icub.iKinIpOptMin_attachLIC(self, lic)


    def getLIC(self):
        """getLIC(iKinIpOptMin self) -> iKinLinIneqConstr"""
        return _icub.iKinIpOptMin_getLIC(self)


    def specify2ndTaskEndEff(self, n):
        """specify2ndTaskEndEff(iKinIpOptMin self, unsigned int const n)"""
        return _icub.iKinIpOptMin_specify2ndTaskEndEff(self, n)


    def get2ndTaskChain(self):
        """get2ndTaskChain(iKinIpOptMin self) -> iKinChain"""
        return _icub.iKinIpOptMin_get2ndTaskChain(self)


    def setMaxIter(self, max_iter):
        """setMaxIter(iKinIpOptMin self, int const max_iter)"""
        return _icub.iKinIpOptMin_setMaxIter(self, max_iter)


    def getMaxIter(self):
        """getMaxIter(iKinIpOptMin self) -> int"""
        return _icub.iKinIpOptMin_getMaxIter(self)


    def setMaxCpuTime(self, max_cpu_time):
        """setMaxCpuTime(iKinIpOptMin self, double const max_cpu_time)"""
        return _icub.iKinIpOptMin_setMaxCpuTime(self, max_cpu_time)


    def getMaxCpuTime(self):
        """getMaxCpuTime(iKinIpOptMin self) -> double"""
        return _icub.iKinIpOptMin_getMaxCpuTime(self)


    def setTol(self, tol):
        """setTol(iKinIpOptMin self, double const tol)"""
        return _icub.iKinIpOptMin_setTol(self, tol)


    def getTol(self):
        """getTol(iKinIpOptMin self) -> double"""
        return _icub.iKinIpOptMin_getTol(self)


    def setConstrTol(self, constr_tol):
        """setConstrTol(iKinIpOptMin self, double const constr_tol)"""
        return _icub.iKinIpOptMin_setConstrTol(self, constr_tol)


    def getConstrTol(self):
        """getConstrTol(iKinIpOptMin self) -> double"""
        return _icub.iKinIpOptMin_getConstrTol(self)


    def setVerbosity(self, verbose):
        """setVerbosity(iKinIpOptMin self, unsigned int const verbose)"""
        return _icub.iKinIpOptMin_setVerbosity(self, verbose)


    def setHessianOpt(self, useHessian):
        """setHessianOpt(iKinIpOptMin self, bool const useHessian)"""
        return _icub.iKinIpOptMin_setHessianOpt(self, useHessian)


    def setUserScaling(self, useUserScaling, _obj_scaling, _x_scaling, _g_scaling):
        """setUserScaling(iKinIpOptMin self, bool const useUserScaling, double const _obj_scaling, double const _x_scaling, double const _g_scaling)"""
        return _icub.iKinIpOptMin_setUserScaling(self, useUserScaling, _obj_scaling, _x_scaling, _g_scaling)


    def setDerivativeTest(self, enableTest, enable2ndDer=False):
        """
        setDerivativeTest(iKinIpOptMin self, bool const enableTest, bool const enable2ndDer=False)
        setDerivativeTest(iKinIpOptMin self, bool const enableTest)
        """
        return _icub.iKinIpOptMin_setDerivativeTest(self, enableTest, enable2ndDer)


    def getBoundsInf(self, lower, upper):
        """getBoundsInf(iKinIpOptMin self, double & lower, double & upper)"""
        return _icub.iKinIpOptMin_getBoundsInf(self, lower, upper)


    def setBoundsInf(self, lower, upper):
        """setBoundsInf(iKinIpOptMin self, double const lower, double const upper)"""
        return _icub.iKinIpOptMin_setBoundsInf(self, lower, upper)


    def solve(self, *args):
        """
        solve(iKinIpOptMin self, Vector q0, Vector xd, double weight2ndTask, Vector xd_2nd, Vector w_2nd, double weight3rdTask, Vector qd_3rd, Vector w_3rd, int * exit_code=None, bool * exhalt=None, iKinIterateCallback iterate=None) -> Vector
        solve(iKinIpOptMin self, Vector q0, Vector xd, double weight2ndTask, Vector xd_2nd, Vector w_2nd, double weight3rdTask, Vector qd_3rd, Vector w_3rd, int * exit_code=None, bool * exhalt=None) -> Vector
        solve(iKinIpOptMin self, Vector q0, Vector xd, double weight2ndTask, Vector xd_2nd, Vector w_2nd, double weight3rdTask, Vector qd_3rd, Vector w_3rd, int * exit_code=None) -> Vector
        solve(iKinIpOptMin self, Vector q0, Vector xd, double weight2ndTask, Vector xd_2nd, Vector w_2nd, double weight3rdTask, Vector qd_3rd, Vector w_3rd) -> Vector
        solve(iKinIpOptMin self, Vector q0, Vector xd, double weight2ndTask, Vector xd_2nd, Vector w_2nd) -> Vector
        solve(iKinIpOptMin self, Vector q0, Vector xd) -> Vector
        """
        return _icub.iKinIpOptMin_solve(self, *args)

    __swig_destroy__ = _icub.delete_iKinIpOptMin
    __del__ = lambda self: None
iKinIpOptMin_swigregister = _icub.iKinIpOptMin_swigregister
iKinIpOptMin_swigregister(iKinIpOptMin)

class RpcProcessor(yarp.PortReader):
    """Proxy of C++ iCub::iKin::RpcProcessor class."""

    __swig_setmethods__ = {}
    for _s in [yarp.PortReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RpcProcessor, name, value)
    __swig_getmethods__ = {}
    for _s in [yarp.PortReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RpcProcessor, name)
    __repr__ = _swig_repr

    def __init__(self, _slv):
        """__init__(iCub::iKin::RpcProcessor self, CartesianSolver _slv) -> RpcProcessor"""
        this = _icub.new_RpcProcessor(_slv)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _icub.delete_RpcProcessor
    __del__ = lambda self: None
RpcProcessor_swigregister = _icub.RpcProcessor_swigregister
RpcProcessor_swigregister(RpcProcessor)

class InputPort(yarp.BufferedPortBottle):
    """Proxy of C++ iCub::iKin::InputPort class."""

    __swig_setmethods__ = {}
    for _s in [yarp.BufferedPortBottle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [yarp.BufferedPortBottle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputPort, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_pose(self):
        """get_pose(InputPort self) -> int &"""
        return _icub.InputPort_get_pose(self)


    def get_contMode(self):
        """get_contMode(InputPort self) -> bool &"""
        return _icub.InputPort_get_contMode(self)


    def get_tokenPtr(self):
        """get_tokenPtr(InputPort self) -> double *"""
        return _icub.InputPort_get_tokenPtr(self)


    def get_dof(self):
        """get_dof(InputPort self) -> Vector"""
        return _icub.InputPort_get_dof(self)


    def get_xd(self):
        """get_xd(InputPort self) -> Vector"""
        return _icub.InputPort_get_xd(self)


    def set_dof(self, _dof):
        """set_dof(InputPort self, Vector _dof)"""
        return _icub.InputPort_set_dof(self, _dof)


    def reset_xd(self, _xd):
        """reset_xd(InputPort self, Vector _xd)"""
        return _icub.InputPort_reset_xd(self, _xd)


    def isNewDataEvent(self):
        """isNewDataEvent(InputPort self) -> bool"""
        return _icub.InputPort_isNewDataEvent(self)


    def handleTarget(self, b):
        """handleTarget(InputPort self, Bottle b) -> bool"""
        return _icub.InputPort_handleTarget(self, b)


    def handleDOF(self, b):
        """handleDOF(InputPort self, Bottle b) -> bool"""
        return _icub.InputPort_handleDOF(self, b)


    def handlePose(self, newPose):
        """handlePose(InputPort self, int const newPose) -> bool"""
        return _icub.InputPort_handlePose(self, newPose)


    def handleMode(self, newMode):
        """handleMode(InputPort self, int const newMode) -> bool"""
        return _icub.InputPort_handleMode(self, newMode)

    __swig_destroy__ = _icub.delete_InputPort
    __del__ = lambda self: None
InputPort_swigregister = _icub.InputPort_swigregister
InputPort_swigregister(InputPort)

class SolverCallback(iKinIterateCallback):
    """Proxy of C++ iCub::iKin::SolverCallback class."""

    __swig_setmethods__ = {}
    for _s in [iKinIterateCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [iKinIterateCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SolverCallback, name)
    __repr__ = _swig_repr

    def __init__(self, _slv):
        """__init__(iCub::iKin::SolverCallback self, CartesianSolver _slv) -> SolverCallback"""
        this = _icub.new_SolverCallback(_slv)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _exec(self, xd, q):
        """_exec(SolverCallback self, Vector xd, Vector q)"""
        return _icub.SolverCallback__exec(self, xd, q)

    __swig_destroy__ = _icub.delete_SolverCallback
    __del__ = lambda self: None
SolverCallback_swigregister = _icub.SolverCallback_swigregister
SolverCallback_swigregister(SolverCallback)

class PartDescriptor(_object):
    """Proxy of C++ iCub::iKin::PartDescriptor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PartDescriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lmb"] = _icub.PartDescriptor_lmb_set
    __swig_getmethods__["lmb"] = _icub.PartDescriptor_lmb_get
    if _newclass:
        lmb = _swig_property(_icub.PartDescriptor_lmb_get, _icub.PartDescriptor_lmb_set)
    __swig_setmethods__["chn"] = _icub.PartDescriptor_chn_set
    __swig_getmethods__["chn"] = _icub.PartDescriptor_chn_get
    if _newclass:
        chn = _swig_property(_icub.PartDescriptor_chn_get, _icub.PartDescriptor_chn_set)
    __swig_setmethods__["cns"] = _icub.PartDescriptor_cns_set
    __swig_getmethods__["cns"] = _icub.PartDescriptor_cns_get
    if _newclass:
        cns = _swig_property(_icub.PartDescriptor_cns_get, _icub.PartDescriptor_cns_set)
    __swig_setmethods__["prp"] = _icub.PartDescriptor_prp_set
    __swig_getmethods__["prp"] = _icub.PartDescriptor_prp_get
    if _newclass:
        prp = _swig_property(_icub.PartDescriptor_prp_get, _icub.PartDescriptor_prp_set)
    __swig_setmethods__["rvs"] = _icub.PartDescriptor_rvs_set
    __swig_getmethods__["rvs"] = _icub.PartDescriptor_rvs_get
    if _newclass:
        rvs = _swig_property(_icub.PartDescriptor_rvs_get, _icub.PartDescriptor_rvs_set)
    __swig_setmethods__["num"] = _icub.PartDescriptor_num_set
    __swig_getmethods__["num"] = _icub.PartDescriptor_num_get
    if _newclass:
        num = _swig_property(_icub.PartDescriptor_num_get, _icub.PartDescriptor_num_set)

    def __init__(self):
        """__init__(iCub::iKin::PartDescriptor self) -> PartDescriptor"""
        this = _icub.new_PartDescriptor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _icub.delete_PartDescriptor
    __del__ = lambda self: None
PartDescriptor_swigregister = _icub.PartDescriptor_swigregister
PartDescriptor_swigregister(PartDescriptor)

class CartesianSolver(yarp.RateThread):
    """Proxy of C++ iCub::iKin::CartesianSolver class."""

    __swig_setmethods__ = {}
    for _s in [yarp.RateThread]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CartesianSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [yarp.RateThread]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CartesianSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def open(self, options):
        """open(CartesianSolver self, Searchable options) -> bool"""
        return _icub.CartesianSolver_open(self, options)


    def interrupt(self):
        """interrupt(CartesianSolver self)"""
        return _icub.CartesianSolver_interrupt(self)


    def close(self):
        """close(CartesianSolver self)"""
        return _icub.CartesianSolver_close(self)


    def isClosed(self):
        """isClosed(CartesianSolver self) -> bool"""
        return _icub.CartesianSolver_isClosed(self)


    def getTimeoutFlag(self):
        """getTimeoutFlag(CartesianSolver self) -> bool &"""
        return _icub.CartesianSolver_getTimeoutFlag(self)


    def suspend(self):
        """suspend(CartesianSolver self)"""
        return _icub.CartesianSolver_suspend(self)


    def resume(self):
        """resume(CartesianSolver self)"""
        return _icub.CartesianSolver_resume(self)

    __swig_destroy__ = _icub.delete_CartesianSolver
    __del__ = lambda self: None
CartesianSolver_swigregister = _icub.CartesianSolver_swigregister
CartesianSolver_swigregister(CartesianSolver)

class iCubArmCartesianSolver(CartesianSolver):
    """Proxy of C++ iCub::iKin::iCubArmCartesianSolver class."""

    __swig_setmethods__ = {}
    for _s in [CartesianSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubArmCartesianSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [CartesianSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubArmCartesianSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubArmCartesianSolver self, std::string const & _slvName) -> iCubArmCartesianSolver
        __init__(iCub::iKin::iCubArmCartesianSolver self) -> iCubArmCartesianSolver
        """
        this = _icub.new_iCubArmCartesianSolver(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def open(self, options):
        """open(iCubArmCartesianSolver self, Searchable options) -> bool"""
        return _icub.iCubArmCartesianSolver_open(self, options)

    __swig_destroy__ = _icub.delete_iCubArmCartesianSolver
    __del__ = lambda self: None
iCubArmCartesianSolver_swigregister = _icub.iCubArmCartesianSolver_swigregister
iCubArmCartesianSolver_swigregister(iCubArmCartesianSolver)

class iCubLegCartesianSolver(CartesianSolver):
    """Proxy of C++ iCub::iKin::iCubLegCartesianSolver class."""

    __swig_setmethods__ = {}
    for _s in [CartesianSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iCubLegCartesianSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [CartesianSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iCubLegCartesianSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(iCub::iKin::iCubLegCartesianSolver self, std::string const & _slvName) -> iCubLegCartesianSolver
        __init__(iCub::iKin::iCubLegCartesianSolver self) -> iCubLegCartesianSolver
        """
        this = _icub.new_iCubLegCartesianSolver(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _icub.delete_iCubLegCartesianSolver
    __del__ = lambda self: None
iCubLegCartesianSolver_swigregister = _icub.iCubLegCartesianSolver_swigregister
iCubLegCartesianSolver_swigregister(iCubLegCartesianSolver)


def init():
    """init() -> bool"""
    return _icub.init()
# This file is compatible with both classic and new-style classes.


